Example of Polymorphism (Method Overriding):
python
Copy code
class Animal:
    def sound(self):
        print("Some generic sound")

class Dog(Animal):
    def sound(self):
        print("Bark")

class Cat(Animal):
    def sound(self):
        print("Meow")

# Creating objects
dog = Dog()
cat = Cat()

# Calling the same method on different objects
dog.sound()  # Output: Bark
cat.sound()  # Output: Meow
Explanation:
The sound method is defined in the Animal class, and both Dog and Cat override this method to provide their own implementation.
The method is called on the object, and Python determines the correct method to invoke based on the object's class at runtime.
Example of Polymorphism (Using Method Overloading-like Behavior):
In Python, method overloading can be simulated by using default parameters or variable-length arguments. Here's an example using default arguments:

python
Copy code
class Calculator:
    def add(self, *args):
        return sum(args)

# Creating an object
calc = Calculator()

# Calling the method with different numbers of arguments
print(calc.add(2, 3))         # Output: 5
print(calc.add(1, 2, 3, 4))   # Output: 10
print(calc.add(10))           # Output: 10
