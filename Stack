def evaluate_postfix(expression: str) -> int:
    # Stack to store operands
    stack = []
    # Loop through each character in the postfix expression
    for char in expression:
        # Skip spaces
        if char == ' ':
            continue
        
        # If the character is a digit, push it to the stack
        if char.isdigit():
            stack.append(int(char))
        else:
            # The character is an operator, so pop two operands from the stack
            if len(stack) < 2:
                return "-1"  # Invalid expression, not enough operands
            
            operand2 = stack.pop()
            operand1 = stack.pop()
            
            # Perform the operation
            if char == '+':
                stack.append(operand1 + operand2)
            elif char == '-':
                stack.append(operand1 - operand2)
            elif char == '*':
                stack.append(operand1 * operand2)
            elif char == '/':
                if operand2 == 0:
                    return -1  # Division by zero is not allowed
                stack.append(operand1 // operand2)  # Integer division
            else:
                return -1  # Invalid operator
    
    # After processing all characters, there should be exactly one element in the stack
    if len(stack) != 1:
        return -1  # Invalid expression, extra operands or operators
    
    return stack.pop()  # The final result

# Test cases
print(evaluate_postfix("45+6*-"))  # Should return -1 (invalid expression)
print(evaluate_postfix("23*42/+"))  # Should return 8
# print(evaluate_postfix("34+5*"))    # Should return 35
# print(evaluate_postfix("12+3/"))    # Should return 4
